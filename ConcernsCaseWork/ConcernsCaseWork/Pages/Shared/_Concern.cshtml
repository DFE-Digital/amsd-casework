@model ConcernsCaseWork.Models.TypeModel
@{
	var types = Model.TypesDictionary;
	var type = Model.Type;
	var subType = Model.SubType;
	var typeIndex = 1;
	var subTypeIndex = 1;
}

<legend class="govuk-fieldset__legend govuk-fieldset__legend--s"></legend>

<div class="govuk-radios govuk-radios--conditional" data-module="govuk-radios">
	@{
		foreach (var (key, value) in types)
		{
			// Include type urn at type level
			var hasSingleSubType = value.Any() && value.Count == 1;
			var firstSubType = value.First();
			var typeValue = hasSingleSubType ? firstSubType.Urn + ":" + key : key;
			
			<div class="govuk-radios__item">
					
				<input class="govuk-radios__input" data-aria-controls="conditional-type-@typeIndex" id="type" name="type"
				       type="radio" value="@typeValue" checked="@type.Equals(key)">
				<label class="govuk-label govuk-radios__label" for="type">
					@key
				</label>
			</div>
			
			@if (!hasSingleSubType)
			{
				<div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-type-@typeIndex">
					<div class="govuk-form-group">
						
						@foreach (var subtype in value)
						{
							<div class="govuk-radios__item">
								<input class="govuk-radios__input" id="sub-type-@subTypeIndex" name="sub-type" type="radio" 
								       value="@subtype.Urn:@subtype.SubType" checked="@subType.Equals(subtype.SubType)">
								<label class="govuk-label govuk-radios__label" for="sub-type-@subTypeIndex">
									@key: @subtype.SubType
								</label>
							</div>

							subTypeIndex++;
						}

					</div>
				</div>
			}
			
			typeIndex++;
		}
	}
</div>


